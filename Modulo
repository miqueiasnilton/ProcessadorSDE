module SimpleProcessor(
    input wire clk,
    input wire reset,
    input wire [15:0] instruction, // Instrução de 16 bits
    output reg [15:0] result
);

    reg [15:0] register_file [0:7]; // 8 registradores de 16 bits
    reg [2:0] rs, rt, rd;
    reg [3:0] funct;
    reg [6:0] imm;
    reg [12:0] target_addr;
    reg [2:0] op;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Inicializa os registradores
            integer i;
            for (i = 0; i < 8; i = i + 1) begin
                register_file[i] <= 16'b0;
            end
            result <= 16'b0;
        end else begin
            // Decodifica a instrução
            op = instruction[15:13];
            case(op)
                3'b000: begin // Tipo R
                    rs = instruction[12:10];
                    rt = instruction[9:7];
                    rd = instruction[6:4];
                    funct = instruction[3:0];
                    // Executa a operação do tipo R
                    case(funct)
                        4'b0000: register_file[rd] = register_file[rs] + register_file[rt]; // ADD
                        4'b0001: register_file[rd] = register_file[rs] - register_file[rt]; // SUB
                        // Adicione outras operações aqui
                        default: register_file[rd] = 16'b0;
                    endcase
                end
                
                3'b001: begin // Tipo I
                    rs = instruction[12:10];
                    rt = instruction[9:7];
                    imm = instruction[6:0];
                    // Executa a operação do tipo I
                    case(instruction[6:4])
                        3'b000: register_file[rt] = register_file[rs] + imm; // LW
                        // Adicione outras operações aqui
                        default: register_file[rt] = 16'b0;
                    endcase
                end
                
                3'b010: begin // Tipo J
                    target_addr = instruction[12:0];
                    // Implementação simples do jump
                    // Não usual em Verilog, mas para propósitos de exemplo
                    result = target_addr;
                end
            endcase
        end
    end
endmodule
